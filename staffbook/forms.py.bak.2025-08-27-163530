from .models import (
    Driver, DriverLicense,
)
from django import forms
from django.forms import inlineformset_factory
from .models import Accident, Reward, DriverInsurance, DriverPayrollRecord, Driver # ✅ 保险、事故、奖励等模型


MONTH_CHOICES = [(m, f"{m}月") for m in range(1, 13)]

# ✅ 通用样式自动添加工具函数
def apply_form_control_style(fields, exclude_types=(forms.Select, forms.RadioSelect, forms.CheckboxInput, forms.Textarea)):
    for field in fields:
        if not isinstance(fields[field].widget, exclude_types):
            fields[field].widget.attrs.update({'class': 'form-control'})

# ✅ 司机基础信息表单
class DriverForm(forms.ModelForm):
    COMPANY_CHOICES = [
        ('光交通株式会社', '光交通株式会社'),
        # 可继续追加你需要的公司名
    ]
    WORKPLACE_CHOICES = [
        ('京都営業所', '京都営業所'),
        # 同样追加需要的营业所名
    ]

    NATIONALITY_CHOICES = [
    ('日本', '日本'),
    ('中国', '中国'),
    ('韓国', '韓国'),
    ('ベトナム', 'ベトナム'),
    ('ネパール', 'ネパール'),
    ('フィリピン', 'フィリピン'),
    ('ミャンマー', 'ミャンマー'),
    ('インド', 'インド'),
    ('その他', 'その他'),
]

    company   = forms.ChoiceField(choices=COMPANY_CHOICES,   label="事業者名",
                                  widget=forms.Select(attrs={'class': 'form-select'}))
    workplace = forms.ChoiceField(choices=WORKPLACE_CHOICES, label="営業所名",
                                  widget=forms.Select(attrs={'class': 'form-select'}))
    
    # ⬇⬇⬇ 新增：国籍下拉
    nationality = forms.ChoiceField(choices=NATIONALITY_CHOICES, label="国籍",
                                    widget=forms.Select(attrs={'class': 'form-select'}))

    
    class Meta:
        model = Driver
        fields = [
            'driver_code', 'name', 'kana',
            'alt_name', 'alt_kana',          # ⬅ 确保包含别名/别名フリガナ
            'company', 'workplace',          # ⬅ 下拉
            'department', 'position', 'employ_type',
            'appointment_date', 'hire_date', 'create_date',
            'employ_type', 'resigned_date',
            'birth_date', 'gender', 'blood_type',
            'postal_code', 'address', 'phone_number',
            'is_foreign', 'nationality', 'residence_status', 'residence_expiry',
            'photo', 'photo_date', 'remark',
        ]
        widgets = {
            'gender': forms.Select(attrs={'class': 'form-select'}),
            'blood_type': forms.Select(attrs={'class': 'form-select'}),
            'birth_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'hire_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'residence_expiry': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'resigned_date': forms.DateInput(attrs={'type': 'date','class':'form-control'}),
            'appointment_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'create_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'remark': forms.Textarea(attrs={'class': 'form-control', 'rows': 2}),
            # ⚠️ 不要再给 nationality 设 TextInput 了，这一行删掉/不要保留
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        apply_form_control_style(self.fields)

    def clean(self):
        cleaned = super().clean()
        employ_type = cleaned.get('employ_type') or getattr(self.instance, 'employ_type', None)
        resigned_date = cleaned.get('resigned_date') or getattr(self.instance, 'resigned_date', None)

        et = str(employ_type or '')
        RETIRED_VALUE = '3'  # models.py の choices: ('3', '退職者')
        is_retired = (et == RETIRED_VALUE) or ('退職' in et)

        if is_retired and not resigned_date:
            self.add_error('resigned_date', '退職日は必須です。')

        return cleaned


class HistoryEntryForm(forms.Form):
    # 用于校验单条履歴（学歴/職歴），不依赖任何模型
    start_year  = forms.IntegerField(min_value=1900, max_value=2100, label="始(年)", required=True)
    start_month = forms.ChoiceField(choices=MONTH_CHOICES, label="始(月)", required=True)
    end_year    = forms.IntegerField(min_value=1900, max_value=2100, required=False, label="終(年)")
    end_month   = forms.ChoiceField(choices=MONTH_CHOICES, required=False, label="終(月)")
    place       = forms.CharField(max_length=255, label="場所 / 会社・職場", required=True)
    note        = forms.CharField(max_length=255, label="備考", required=False)

    def clean(self):
        cleaned = super().clean()
        sy = cleaned.get("start_year")
        sm = int(cleaned.get("start_month") or 0)
        ey = cleaned.get("end_year")
        em = int(cleaned.get("end_month") or 0)

        if ey and not em:
            self.add_error("end_month", "請選擇終(月)")
        if em and not ey:
            self.add_error("end_year", "請填寫終(年)")
        if sy and sm and ey and em and (ey, em) < (sy, sm):
            raise forms.ValidationError("終（年/月）不能早於 始（年/月）")
        return cleaned
# === 替换结束 ===


# ✅ 驾照信息表单
class DriverLicenseForm(forms.ModelForm):
    class Meta:
        model = DriverLicense
        fields = [
            'photo', 'license_number', 'issue_date', 'expiry_date',
            'date_acquired_a', 'date_acquired_b', 'date_acquired_c',
            'license_types', 'license_conditions', 'note'
        ]
        widgets = {
            'issue_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'expiry_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'date_acquired_a': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'date_acquired_b': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'date_acquired_c': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'license_number': forms.TextInput(attrs={'class': 'form-control'}),
            'license_conditions': forms.TextInput(attrs={'class': 'form-control'}),
            'note': forms.Textarea(attrs={'class': 'form-control', 'rows':2}),
            'license_types': forms.CheckboxSelectMultiple(),
        }

    def clean(self):
        cleaned = super().clean()
        if not cleaned.get('issue_date'):
            self.add_error('issue_date', '交付年月日为必填项')
        return cleaned

# ✅ 事故表单
class AccidentForm(forms.ModelForm):
    class Meta:
        model = Accident
        fields = ['happened_at', 'description', 'penalty', 'note']
        widgets = {
            'happened_at': forms.DateInput(attrs={'type': 'date'}),
            'description': forms.Textarea(attrs={'rows': 2}),
            'note': forms.Textarea(attrs={'rows': 2}),
        }

# ✅ 简版基础信息表单（编辑页用）
class DriverBasicForm(forms.ModelForm):
    # --- 这三个下拉专用于【编辑页】 ---
    # 若模块顶部已定义了同名 *_CHOICES，请删除/忽略这三段并直接引用已有常量
    NATIONALITY_CHOICES = [
        ('日本', '日本'), ('中国', '中国'), ('韓国', '韓国'),
        ('ベトナム', 'ベトナム'), ('ネパール', 'ネパール'),
        ('その他', 'その他'),
    ]
    COMPANY_CHOICES = [
        ('光交通株式会社', '光交通株式会社'),
    ]
    WORKPLACE_CHOICES = [
        ('京都営業所', '京都営業所'),

    ]

    # 下拉：显式指定 ChoiceField + Select（带 Bootstrap 样式）
    nationality = forms.ChoiceField(
        choices=NATIONALITY_CHOICES, label="国籍",
        widget=forms.Select(attrs={'class': 'form-select'})
    )
    company = forms.ChoiceField(
        choices=COMPANY_CHOICES, label="事業者名",
        widget=forms.Select(attrs={'class': 'form-select'})
    )
    workplace = forms.ChoiceField(
        choices=WORKPLACE_CHOICES, label="営業所名",
        widget=forms.Select(attrs={'class': 'form-select'})
    )

    class Meta:
        model = Driver
        fields = [
            # 基本
            'driver_code', 'name', 'kana', 'alt_name', 'alt_kana',
            # 公司/营业所
            'company', 'workplace', 'department', 'position', 'employ_type',
            # 外国籍/在留
            'is_foreign', 'nationality', 'residence_status', 'residence_expiry',
            # 其它日期/个人信息
            'appointment_date', 'hire_date', 'create_date',
            'birth_date', 'gender', 'blood_type', 'postal_code', 'address',
            'phone_number', 'photo', 'photo_date', 'remark'
        ]
        widgets = {
            # 日期类：原生 date 选择器
            'appointment_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'hire_date':        forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'create_date':      forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'birth_date':       forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'residence_expiry': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'photo_date':       forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),

            # 下拉类（这里不要再给 company/workplace/nationality 设 widget，已在上面定义）
            'gender':      forms.Select(attrs={'class': 'form-select'}),
            'blood_type':  forms.Select(attrs={'class': 'form-select'}),
            'position':    forms.Select(attrs={'class': 'form-select'}),
            'employ_type': forms.Select(attrs={'class': 'form-select'}),
            'residence_status': forms.Select(attrs={'class': 'form-select'}),

            # 文本类
            'driver_code': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '従業員番号'}),
            'name':        forms.TextInput(attrs={'class': 'form-control', 'placeholder': '氏名'}),
            'kana':        forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'フリガナ'}),
            'alt_name':    forms.TextInput(attrs={'class': 'form-control', 'placeholder': '別名'}),
            'alt_kana':    forms.TextInput(attrs={'class': 'form-control', 'placeholder': '別名フリガナ'}),
            'department':  forms.TextInput(attrs={'class': 'form-control', 'placeholder': '部門'}),
            'postal_code': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '郵便番号'}),
            'address':     forms.TextInput(attrs={'class': 'form-control', 'placeholder': '住所'}),
            'phone_number':forms.TextInput(attrs={'class': 'form-control', 'placeholder': '電話番号'}),

            # 备注多行
            'remark':      forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'placeholder': '特記事項'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        from django import forms as _f
        for name, field in self.fields.items():
            # 已是 select/textarea/file/checkbox/radio 的就别再加 form-control
            if isinstance(field.widget, (_f.Select, _f.Textarea, _f.FileInput, _f.CheckboxInput, _f.RadioSelect)):
                continue
            cls = field.widget.attrs.get('class', '')
            field.widget.attrs['class'] = (cls + ' form-control').strip()

# ✅ 司机个人信息编辑
class DriverPersonalInfoForm(forms.ModelForm):
    class Meta:
        model = Driver
        fields = ['photo_date', 'postal_code', 'address', 'phone_number', 'photo']
        widgets = {
            'photo_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'postal_code': forms.TextInput(attrs={'class': 'form-control'}),
            'address': forms.TextInput(attrs={'class': 'form-control'}),
            'phone_number': forms.TextInput(attrs={'class': 'form-control'}),
            # 图片字段不需要 form-control
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        apply_form_control_style(self.fields, exclude_types=(forms.FileInput,))

# ✅ 奖励表单
class RewardForm(forms.ModelForm):
    class Meta:
        model = Reward
        # 根据需要列出所有要在表单中出现的字段
        fields = ['points', 'remark']
        labels = {
            'points': '积分',
            'remark': '备注',
        }
        widgets = {
            'remark': forms.Textarea(attrs={'rows': 3}),
        }

# ✅ 保险表单
class DriverInsuranceForm(forms.ModelForm):
    class Meta:
        model = DriverInsurance
        fields = ['kind', 'join_date', 'number']
        widgets = {
            'join_date': forms.DateInput(attrs={'type': 'date'}),
        }

class DriverPayrollRecordForm(forms.ModelForm):
    class Meta:
        model = DriverPayrollRecord
        # 不在这里写具体字段，由 view 里 modelformset_factory(fields=…) 动态指定
        fields = []
        widgets = {
            'month': forms.DateInput(attrs={'type': 'month'}),
        }

# ✅ 签证在留信息表单
class DriverCertificateForm(forms.ModelForm):
    class Meta:
        model = Driver
        fields = [
            'is_foreign', 'nationality', 'residence_status', 'residence_expiry',
            'residence_card_image', 'work_permission_confirmed',
            'has_health_check', 'has_residence_certificate',
            'has_tax_form', 'has_license_copy'
        ]
        widgets = {
            'residence_expiry': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'residence_status': forms.Select(attrs={'class': 'form-select'}),
            'residence_card_image': forms.ClearableFileInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        apply_form_control_style(
            self.fields,
            exclude_types=(forms.CheckboxInput, forms.ClearableFileInput)
        )

class DriverBasicEditForm(DriverBasicForm):
    """compat alias to avoid import errors"""
    pass